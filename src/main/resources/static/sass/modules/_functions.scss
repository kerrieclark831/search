/* Convert PX units to EMs.
Ex: margin-right: rem(16);
*/
@function rem($pxval, $base: $rembase) {
  @return #{$pxval / $base}rem;
}

/* Used to convert PX to EMs for multiple properties or values or both.
$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.
Examples:
@include scale(line-height, 30)
@include scale(line-height, 30, 16)
@include scale(width height, 125);
@include scale(padding, 0 25, 16);
@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
*/
@mixin scale($props, $sizes, $base: $rembase) {
  $values: ();
  $sublists: false;
  @each $s in $sizes {
    /* unwrap lists for values that have multiple list of values such as text-shadow */
    @if type-of($s) == list {
      $sublists: true;
      $vv: ();
      @each $ss in $s {
        $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}rem, $ss));
      }
      $values: append($values, join((), $vv));
    } @else {
      $values: append($values, if(type-of($s) == number, #{$s / $base}rem, $s));
    }
  }
  $value: join((), $values, if($sublists, comma, space));
  @each $prop in $props { #{$prop}: $value }
}

/* Used to create more accurate fallback hex value to rgba alpha value */
/* Uses Mixin right below */
@function trans($color, $percentage) {
  @return lighten($color, (1-$percentage)*5%);
}
@function transd($color, $percentage) {
  @return darken($color, (1-$percentage)*5%);
}
/* Mixin for the above function
Takes $type (color or bg), $color (hex value), $percentage (alpha)
---------
EXAMPLE for BG-color darken (can also pass color variable):
  @include tran(bg, #00ff00, .6, darken);
---------
RETURNS:
  background-color: #00f500;
  background-color: rgba(0, 255, 0, 0.6);
*/
@mixin tran($type, $color, $percentage, $shade: lighten) {
  @if $shade == lighten {
    @if $type == color {
      color: trans($color, $percentage);
      color: rgba($color, $percentage);
    }
    @if $type == bg {
      background-color: trans($color, $percentage);
      background-color: rgba($color, $percentage);
    }
  }
  @else {
    @if $type == color {
      color: transd($color, $percentage);
      color: rgba($color, $percentage);
    }
    @if $type == bg {
      background-color: transd($color, $percentage);
      background-color: rgba($color, $percentage);
    }
  }
}